{
  "name": "openfga",
  "scopeName": "source.openfga",
  "fileTypes": [".fga", ".openfga"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#define"
    },
    {
      "include": "#condition"
    }
  ],
  "repository": {
    "condition": {
      "match": "(condition)\\s([_a-zA-Z][_a-zA-Z0-9]+)\\((.*)\\)\\s*",
      "captures": {
        "1": {
          "name": "keyword.condition.openfga"
        },
        "2": {
          "name": "entity.name.function.condition.openfga"
        },
        "3": {
          "patterns": [
            {
              "match": "([_a-zA-Z][_a-zA-Z0-9]+)\\:\\s*([_a-zA-Z][_a-zA-Z0-9]+),?",
              "captures": {
                "1": {
                  "name": "variable.parameter.name.condition.openfga"
                },
                "2": {
                  "name": "variable.parameter.type.condition.openfga"
                }
              }
            }
          ]
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.openfga",
          "match": "^(\\s*)#.*"
        },
        {
          "name": "comment.openfga",
          "match": "(\\s+)#.*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.as.openfga",
          "match": "\\bas\\b"
        },
        {
          "name": "keyword.from.openfga",
          "match": "\\bfrom\\b"
        },
        {
          "name": "keyword.model.openfga",
          "match": "\\bmodel\\b"
        },
        {
          "name": "keyword.relations.openfga",
          "match": "\\brelations\\b"
        },
        {
          "name": "keyword.schema.openfga",
          "match": "\\bschema\\b"
        },
        {
          "name": "keyword.self.openfga",
          "match": "\\bself\\b"
        },
        {
          "name": "keyword.operator.word.intersection.openfga",
          "match": "\\band\\b"
        },
        {
          "name": "keyword.operator.word.union.openfga",
          "match": "\\bor\\b"
        },
        {
          "name": "keyword.operator.word.exclusion.openfga",
          "match": "\\bbut\\snot\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b(type)\\s+([a-zA-Z0-9-_]+)",
          "captures": {
            "1": {
              "name": "keyword.type.openfga"
            },
            "2": {
              "name": "support.class.type.name.value.openfga"
            }
          }
        }
      ]
    },
    "direct_types": {
      "patterns": [
        {
          "match": "([a-zA-Z0-9-_:#*]+)(\\s+(with)\\s+([a-zA-Z0-9-_]+)?)?(,\\s*)?",
          "captures": {
            "1": {
              "name": "variable.parameter.type-restrictions.openfga"
            },
            "3": {
              "name": "keyword.operator.word.with.openfga"
            },
            "4": {
              "name": "variable.parameter.type-restrictions.openfga"
            }
          }
        }
      ]
    },
    "relation": {
      "patterns": [
        {
          "match": "(\\[)([^\\]]+)(\\])",
          "captures": {
            "1": {
              "name": "type-restrictions.bracket.delimiter.openfga"
            },
            "2": {
              "patterns": [{ "include": "#direct_types" }]
            },
            "3": {
              "name": "type-restrictions.bracket.delimiter.openfga"
            }
          }
        }
      ]
    },
    "define": {
      "patterns": [
        {
          "match": "\\b(define)\\s+([a-zA-Z0-9-_]+)\\s*(:)\\s*([^\n]+)",
          "captures": {
            "1": {
              "name": "keyword.define.openfga"
            },
            "2": {
              "name": "entity.name.function.member.relation.name.openfga"
            },
            "3": {
              "name": "colon.define.delimiter.openfga"
            },
            "4": {
              "patterns": [
                { "include": "#relation" },
                { "include": "#keywords" },
                { "include": "#types" },
                { "include": "#comments" }
              ]
            }
          }
        }
      ]
    },
    "word": {
      "patterns": [
        {
          "match": "$?[a-zA-Z0-9-_]",
          "name": "string.unquoted.openfga"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "computed.relation.value.openfga",
          "match": "\\b([a-zA-Z0-9-_]+)\\b"
        }
      ]
    }
  }
}
